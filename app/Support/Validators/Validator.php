<?php

namespace Emtudo\Support\Validators;

use Carbon\Carbon;
use Emtudo\Support\Helpers\Dates as DateHelper;
use Illuminate\Support\Arr;
use ResultSystems\Validation\Validator as BaseValidator;

class Validator extends BaseValidator
{
    /**
     * @param string $attribute
     * @param mixed  $value
     * @param array  $parameters
     *
     * @return bool
     */
    public function validateCleanUnique($attribute, $value, $parameters)
    {
        $value = $this->clearSpecialChars($value);

        return parent::validateUnique($attribute, $value, $parameters); // TODO: Change the autogenerated stub
    }

    /**
     * @param string $attribute
     * @param mixed  $value
     * @param array  $parameters
     *
     * @return bool
     */
    public function validateCleanExists($attribute, $value, $parameters)
    {
        $value = $this->clearSpecialChars($value);

        return parent::validateExists($attribute, $value, $parameters);
    }

    public function validateValidDateFormat($attribute, $value, $parameters)
    {
        return DateHelper::isValidDate($value);
    }

    public function validateExistsPublicId($attribute, $value, $parameters)
    {
        return $this->validateExists($attribute, decode_id($value), $parameters);
    }

    public function validateExistsByTenant($attribute, $value, $parameters)
    {
        $newParams = array_merge($parameters, [
            'tenant_id', tenant()->id,
        ]);

        return $this->validateExists($attribute, $value, $newParams);
    }

    public function validateExistsPublicIdByTenant($attribute, $value, $parameters)
    {
        $newParams = array_merge($parameters, [
            'tenant_id', tenant()->id,
        ]);

        return $this->validateExistsPublicId($attribute, $value, $newParams);
    }

    public function validateExistsSkill($attribute, $value, $parameters)
    {
        $user = auth()->user();

        $newParams = array_merge($parameters, [
            'tenant_id', tenant()->id,
            'teacher_id', $user->id,
        ]);

        if (!$user->is_admin) {
            $newParams = array_merge($newParams, [
                'teacher_id', $user->id,
            ]);
        }

        return $this->validateExists($attribute, $value, $newParams);
    }

    public function validateExistsPublicSkill($attribute, $value, $parameters)
    {
        return $this->validateExistsSkill($attribute, decode_id($value), $parameters);
    }

    public function validateExistsSchoolDay($attribute, $value, $parameters)
    {
        $newParams = array_merge($parameters, [
            'school_day', '1',
        ]);

        return $this->validateExists($attribute, $value, $newParams);
    }

    public function validateWeekDay($attribute, $value, $parameters)
    {
        $date = strtolower(date('l', strtotime($value)));

        return in_array($date, $parameters, true);
    }

    /**
     * Valid force year.
     *
     * @param string $attribute
     * @param string $value
     * @param string $parameters
     *
     * @return bool
     */
    public function validateForceYear($attribute, $value, $parameters)
    {
        $this->requireParameterCount(1, $parameters, 'force_year');
        $other = Arr::get($this->data, $parameters[0]);

        $validDate = false !== \DateTime::createFromFormat('Y-m-d', $value);
        if (!$validDate) {
            return false;
        }

        $year = Carbon::parse($value)->year;

        return (int) $other === (int) $year;
    }

    /**
     * @param string $value
     *
     * @return string
     */
    protected function clearSpecialChars($value)
    {
        return str_replace(['.', '/', ',', '-', '_'], '', $value);
    }

    /**
     * Replace all params the force_user rule.
     *
     * @param string $message
     * @param string $attribute
     * @param string $rule
     * @param array  $parameters
     *
     * @return string
     */
    protected function replaceForceYear($message, $attribute, $rule, $parameters)
    {
        $other = $this->getDisplayableAttribute($parameters[0]);

        return str_replace(':other', $other, $message);
    }
}
